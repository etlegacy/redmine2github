{
    "children": null,
    "attachments": null,
    "relations": null,
    "changesets": [],
    "journals": [
        {
            "id": 6499,
            "user": {
                "id": 140,
                "name": "Spyhawk"
            },
            "notes": "",
            "created_on": "2017-03-03T13:37:23Z",
            "details": [
                {
                    "property": "attr",
                    "name": "fixed_version_id",
                    "old_value": "8",
                    "new_value": "19"
                }
            ]
        },
        {
            "id": 6723,
            "user": {
                "id": 251,
                "name": "Aranud"
            },
            "notes": "This seem to be difficult to implement and I try to resume what were told on Gitter.\r\n\r\nFirst, regular shader (i.e windows) doesn't use the surfaceparm glass. Currently the surface of a glass (i.e fueldump) is detected as nodraw and nomarks and many invisible entity ( i.e construction set, clip ...), use theses surface. (like thunder mentionned)\r\n\r\nSecond and copy/past litteraly from kemon said : \r\n\r\nsurfaceparm glass is the only thing related to glass and it gives the glass sound when being shot at. Usually mappers made their glass destructible though, so it's a func_explosive that will break when being shot at without glass sound\r\nTransparency with shaders is a complete mess.\r\n\r\nFor now, we have nothing to properly determine if a surface is really a glass. \r\nOtherwise, to fix it, every surface setted as nodraw and nomarks surface should not be detected as an obstacle ... not the best solution but work.\r\n",
            "created_on": "2017-05-15T13:57:29Z",
            "details": []
        },
        {
            "id": 6784,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "This might be done when we add a new surfaceparm into the game. But this is more than a ton of work - we have to adjust mapping tools.",
            "created_on": "2017-06-29T18:16:47Z",
            "details": [
                {
                    "property": "attr",
                    "name": "fixed_version_id",
                    "old_value": "19",
                    "new_value": "4"
                }
            ]
        },
        {
            "id": 6790,
            "user": {
                "id": 256,
                "name": "keMoN"
            },
            "notes": "[quote]Otherwise, to fix it, every surface setted as nodraw and nomarks surface should not be detected as an obstacle ... not the best solution but work.[/quote]\r\n\r\nTo my knowledge this is the current behaviour. However, \"surface\" is the incorrect term. Better use \"brush\" here. (One brush has 6 surfaces/sides).\r\nI made a test map for you and attached it, so please let me go ahead and screw up your day :D\r\n\r\nI have been working with maps in ET literally for years now and to this day I could not write a shader from scratch if my life depended on it. There is no such thing as a standard \"alpha\" shader and I absolutely can not explain what exactly makes the game consider something as \"transparent\", but let me try and lay out my experience for you. Also keep in mind that \"transparent\" is again a rather incorrect term. \r\nIn the test map there are two brushes with battery's bunker texture so you absolutely know that thing is solid as it gets. The yellow one has that texture on all surfaces/sides, while the black one only has the bunker texture assigned to the front. The other sides are common/nodraw. Now all of a sudden the game considers this brush as non existent for entities. While you can not see through, you can walk, shoot, throw nades and for this thread most importantly call artillery through it!\r\n\r\nThe second set of brushes in the test map is with miltary_wall/window_m03. Again the yellow is solid, however this time with common/clipweap on all sides/surfaces except the front. The black one replaces common/clipweap again with common/nodraw.\r\n\r\n//Fun-Fact: The secret room in \"Streets of Italy\" uses that system. It has a seemingly solid concrete texture on the outside and on all other sides it has common/nodraw. The fact that you also see a seemingly solid texture from the inside is because that is another brush with common/nodraw everywhere except the wallpaper on the front.\r\n\r\nRegarding windows/glass:\r\nTheoratically, you can already call artillery through glass, however the brush has to use the window texture on the front and common/nodraw on the other surfaces. Mappers don't usually do this, because that means that you could also move, shoot, throw nades through. Also when you can shoot through it you can't actually shoot it, or in other words break it. So what mappers do is, they use common/clipweap instead of common/nodraw. That way the entire brush is clipped for weapons, meaning it acts as an obstacle. Now you can shoot the brush, but you also can't call artillery through it, since it is considered solid by the game. To make the brush destructible, you transform it into a \"func_explosive\":http://games.chruker.dk/enemy_territory/entities.php?action=show_entity&entity_name=func_explosive. Now it is solid, but breakable.\r\n\r\nSo, I guess what I'm saying is is that this isn't related to a surface, but to the whole brush. I'd love to see this feature implemented, but I think it would need substantial rework of the shader madness.",
            "created_on": "2017-06-30T19:15:39Z",
            "details": [
                {
                    "property": "attachment",
                    "name": "758",
                    "new_value": "transparency_test.pk3"
                }
            ]
        },
        {
            "id": 6792,
            "user": {
                "id": 281,
                "name": "thunder"
            },
            "notes": "Agree with you @ keMoN,\r\n\r\nBut a solution would be if we added a keyword in shader as EX: surface seethrough that would only fix this one, but yes it would mean a lot of code work. We would need to implement this not only in ordinary code but also in shader parser",
            "created_on": "2017-07-01T10:01:26Z",
            "details": []
        },
        {
            "id": 6793,
            "user": {
                "id": 256,
                "name": "keMoN"
            },
            "notes": "This has more potential for errors than benefits. You would need to give this parameter to common/clipweap for example. However, this would mean you can call artillery through all models clipped with that shader.\r\nThis will come back and bite us.",
            "created_on": "2017-07-01T12:03:24Z",
            "details": []
        }
    ],
    "watchers": [
        {
            "id": 9,
            "name": "Mateos"
        }
    ],
    "time_entries": null,
    "id": 644,
    "project": {
        "id": 1,
        "name": "ET: Legacy Development"
    },
    "tracker": {
        "id": 2,
        "name": "Feature"
    },
    "status": {
        "id": 1,
        "name": "New"
    },
    "priority": {
        "id": 4,
        "name": "Normal"
    },
    "author": {
        "id": 90,
        "name": "Saukko"
    },
    "category": {
        "id": 16,
        "name": "Mod CGAME"
    },
    "fixed_version": {
        "id": 4,
        "name": "ALL"
    },
    "subject": "Calling an artillery through glass",
    "description": "The current behaviour is like that even you see through the glass, you can't call an artillery because it is like you would calling inside because the glass is like an obstacle.\r\n\r\nSee the attached demo to see the current behaviour.\r\n\r\n-*S",
    "start_date": "2014-11-20",
    "done_ratio": 0,
    "custom_fields": [
        {
            "id": 1,
            "name": "OS",
            "value": ""
        },
        {
            "id": 2,
            "name": "Arch",
            "value": ""
        }
    ],
    "created_on": "2014-11-20T15:09:28Z",
    "updated_on": "2017-07-01T12:03:24Z"
}