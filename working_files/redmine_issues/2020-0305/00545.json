{
    "children": null,
    "attachments": null,
    "relations": null,
    "changesets": [
        {
            "revision": "4af7c2962722f05dca9a357504098301e40269f7",
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "comments": "botlib: prevent botlib headers from being included more than once refs\n#545",
            "committed_on": "2014-06-06T13:32:10Z"
        },
        {
            "revision": "a3b4ecc6b0b250e93a6c61506444e10ed02c8ed0",
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "comments": "cgame: prevent cg_public.h from being included more than once refs #545",
            "committed_on": "2014-06-07T13:37:42Z"
        },
        {
            "revision": "ed96b1a0490eeb115141f3817a38a5e143555fff",
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "comments": "client: identifier fix refs #545 - initial patch by Anna, unique file\nheaders",
            "committed_on": "2014-06-07T13:40:18Z"
        },
        {
            "revision": "d7ce4358ed56c4b13ef8d84365324aea38583321",
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "comments": "mod: identifier fix refs #545 - initial patch by Anna",
            "committed_on": "2014-06-08T08:45:02Z"
        },
        {
            "revision": "b4dd55daa03edbc0cbcf4f46db1592f44eb921fb",
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "comments": "qcommon: identifier fix, prevent headers from being included more than\nonce refs #545",
            "committed_on": "2014-06-08T10:11:27Z"
        },
        {
            "revision": "d161cde4641d7f4e158126b342c6f912848e5697",
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "comments": "cgame: unique guard name refs #545",
            "committed_on": "2014-06-08T13:58:21Z"
        },
        {
            "revision": "9404e64c54405545234e81d4ba58f343c05902e8",
            "user": {
                "id": 1,
                "name": "Radegast"
            },
            "comments": "game: fixed a couple of warnings in OB interface, refs #545",
            "committed_on": "2014-10-30T08:51:49Z"
        },
        {
            "revision": "dfd1e811ee7dd80c0b18750a1c561dc3f71fa564",
            "user": {
                "id": 1,
                "name": "Radegast"
            },
            "comments": "misc: replaced remaining header guards, fixes #545",
            "committed_on": "2014-11-09T17:39:58Z"
        }
    ],
    "journals": [
        {
            "id": 3229,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "Thank you for the hint. Well as far as I can see we can't even use \"Names beginning with a capital 'E' followed a digit or uppercase letter: may be used for additional error code names. See Error Reporting.\" which is related to identifiers. We should get rid of the double underscore and use your last example.\r\n",
            "created_on": "2014-06-05T15:17:06Z",
            "details": []
        },
        {
            "id": 3230,
            "user": {
                "id": 1,
                "name": "Radegast"
            },
            "notes": "Nah, if you are going to do it then just use  \"#pragma once\":http://en.wikipedia.org/wiki/Pragma_once . I wanted to do that some time ago, but then it was just too much copy pasting to bother.",
            "created_on": "2014-06-05T15:51:05Z",
            "details": [
                {
                    "property": "attr",
                    "name": "category_id",
                    "new_value": "12"
                },
                {
                    "property": "attr",
                    "name": "priority_id",
                    "old_value": "4",
                    "new_value": "3"
                }
            ]
        },
        {
            "id": 3231,
            "user": {
                "id": 328,
                "name": "Anna"
            },
            "notes": "First of all I have to say sorry for this mistake, I totaly overlooked it.\r\n\r\nI submited a patch that uses the last solution in the first post (warrning: not tested, it is for everything under src/)\r\neverything under render, render2 and renderGLES do not seem to be affected by this bug\r\n\r\nThis patch fixes only a limited number of cases that appear only in guard macros so we will be sure that the patch does not break anything\r\n\r\nAs far about #pragma once it is not portable and it is not defined by any standard, in fact GCC did not support it until version 3.4 and it now GCC itself calls it \"Obsolete\" https://gcc.gnu.org/onlinedocs/gcc-4.3.0/cpp/Obsolete-once_002donly-headers.html while google's coding standard (https://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Windows_Code) says that it should not be used and suggests a macro guard that respects the standards instead, some compilers or libraries that help creating a C implemetation like PCC or cparser do not support this. #pragma once would not be a good solution in my opinion",
            "created_on": "2014-06-05T21:49:23Z",
            "details": [
                {
                    "property": "attachment",
                    "name": "328",
                    "new_value": "anna.patch"
                }
            ]
        },
        {
            "id": 3232,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "Anna, no need to say sorry. I think we did all learn a bit more about ISO/IEC standards and by inspecting the code I've realized the header files in botlib path are not even 'macro guarded'  ;)\r\n\r\nI'm still convinced the last example is our solution. As Anna mentioned #pragma once it isn't defined by any standard and we close the door for compilers that don't support it. \r\nIt isn't an issue for clang and gcc but who knows about the future? ",
            "created_on": "2014-06-06T03:59:25Z",
            "details": []
        },
        {
            "id": 3233,
            "user": {
                "id": 1,
                "name": "Radegast"
            },
            "notes": "Like I said this is not something I would bother doing myself, but since we already have the patch from user:Anna we'll go the @INCLUDE_@ way. \r\n\r\nI am all for respecting standards, but as you can see from the wiki page @#pragma once@ is a de facto standard and not just some weird Microsoft C++ extension.\r\n\r\nIR4T4 wrote:\r\n> As Anna mentioned #pragma once it isn't defined by any standard and we close the door for compilers that don't support it. \r\n> It isn't an issue for clang and gcc but who knows about the future?\r\n\r\n|_. Compiler\t|_.#pragma once |\r\n| Clang\t | Supported |\r\n| Comeau C/C++\t| Supported |\r\n| C++Builder XE3\t| Supported |\r\n| Digital Mars C++ | Supported |\r\n| GCC | Supported (since 3.4) |\r\n| Intel C++ Compiler | Supported |\r\n| Microsoft Visual C++ |  Supported |\r\n| Pelles C | Supported |\r\n| ARM DS-5 | Supported |\r\n| IAR C/C++ | Supported |\r\n\r\nI dare you to find a compiler which doesn't support it. :-D None of the others would be able to compile ET:L anyway.",
            "created_on": "2014-06-06T09:25:55Z",
            "details": []
        },
        {
            "id": 3234,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "Radegast wrote:\r\n> Like I said this is not something I would bother doing myself, but since we already have the patch from user:Anna we'll go the @INCLUDE_@ way. \r\nOK\r\n\r\nRadegast wrote:\r\n> I dare you to find a compiler which doesn't support it. :-D None of the others would be able to compile ET:L anyway.\r\nActually I like #pragma once because of less code and I've read this wiki page. But gcc has marked this as obsolete and the @INCLUDE_@ way is fail safe. \r\n\r\n|_. Compiler\t|_.#pragma once |\r\n| Foobar compiler\t | Not Supported |",
            "created_on": "2014-06-06T12:16:54Z",
            "details": []
        },
        {
            "id": 3235,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "",
            "created_on": "2014-06-06T12:18:08Z",
            "details": [
                {
                    "property": "attr",
                    "name": "fixed_version_id",
                    "old_value": "4",
                    "new_value": "6"
                }
            ]
        },
        {
            "id": 3380,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "",
            "created_on": "2014-08-21T15:13:25Z",
            "details": [
                {
                    "property": "attr",
                    "name": "fixed_version_id",
                    "old_value": "6",
                    "new_value": "8"
                }
            ]
        },
        {
            "id": 3659,
            "user": {
                "id": 1,
                "name": "Radegast"
            },
            "notes": "Applied in changeset commit:dfd1e811ee7dd80c0b18750a1c561dc3f71fa564.",
            "created_on": "2014-11-09T17:55:48Z",
            "details": [
                {
                    "property": "attr",
                    "name": "status_id",
                    "old_value": "1",
                    "new_value": "5"
                },
                {
                    "property": "attr",
                    "name": "done_ratio",
                    "old_value": "0",
                    "new_value": "100"
                }
            ]
        },
        {
            "id": 3661,
            "user": {
                "id": 1,
                "name": "Radegast"
            },
            "notes": "It seems user:IR4T4 has removed every invalid header macro. Even the 3rd party omni-bot headers were fixed (althought they will eventually be removed anyway) and I can't find any other cases, so I'm closing this issue.",
            "created_on": "2014-11-09T17:59:29Z",
            "details": [
                {
                    "property": "attr",
                    "name": "assigned_to_id",
                    "new_value": "3"
                }
            ]
        },
        {
            "id": 3662,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "renderer 1 +2 still contain old macros. ",
            "created_on": "2014-11-09T18:03:29Z",
            "details": []
        },
        {
            "id": 3664,
            "user": {
                "id": 1,
                "name": "Radegast"
            },
            "notes": "I looked once more and I don't see any more invalid macros. ",
            "created_on": "2014-11-09T19:04:19Z",
            "details": []
        },
        {
            "id": 3665,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "see TR_LOCAL_H",
            "created_on": "2014-11-09T19:28:58Z",
            "details": []
        },
        {
            "id": 3723,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "",
            "created_on": "2014-11-15T10:37:17Z",
            "details": [
                {
                    "property": "attr",
                    "name": "fixed_version_id",
                    "old_value": "8",
                    "new_value": "6"
                }
            ]
        }
    ],
    "watchers": [
        {
            "id": 328,
            "name": "Anna"
        }
    ],
    "time_entries": null,
    "id": 545,
    "project": {
        "id": 1,
        "name": "ET: Legacy Development"
    },
    "tracker": {
        "id": 1,
        "name": "Bug"
    },
    "status": {
        "id": 5,
        "name": "Fixed"
    },
    "priority": {
        "id": 3,
        "name": "Low"
    },
    "author": {
        "id": 328,
        "name": "Anna"
    },
    "assigned_to": {
        "id": 3,
        "name": "IR4T4"
    },
    "category": {
        "id": 12,
        "name": "General"
    },
    "fixed_version": {
        "id": 6,
        "name": "2.71"
    },
    "subject": "ET Legacy invalidly uses reserved identifiers when naming macros",
    "description": "The ISO/IEC 9899:1999 (also known as C99) standard in Section 7.1.3, \"Reserved Identifiers\" describes how several naming schemes are reserved, notably \"All identifiers that begin with an underscore and either an uppercase letter or another underscore are always reserved for any use.\"\r\nSame rules apply for the other C standard (ANSI X3.159-1989 aka C89, ISO/IEC 9899:1990 aka C90 and ISO/IEC 9899:2011 aka C11)\r\n\r\nI have seen that ET Legacy violates this in almost(?) every header file by defining a guard macro starting from \"__\", example: (in /src/game/bg_local.h) \"#define __BG_LOCAL_H__\"\r\nThis also may be true for struct, variable or function names but sadly I did not had the time to check all the source code for something like this\r\n\r\nThis could be very easily fixed by changing the format of the guard macros, some examples:\r\nETLEGACY_FILENAME_H (or ET_FILENAME_H)\r\nETLEGACY_FILENAME_H__ (or ET_FILENAME_H__)\r\nETLEGACY_FILENAME_H_INCLUDED (or ET_FILENAME_H_INCLUDED)\r\nINCLUDE_FILENAME_H\r\n\r\n\r\nsee also: https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier",
    "start_date": "2014-06-05",
    "done_ratio": 100,
    "custom_fields": [
        {
            "id": 1,
            "name": "OS",
            "value": ""
        },
        {
            "id": 2,
            "name": "Arch",
            "value": ""
        }
    ],
    "created_on": "2014-06-04T23:04:31Z",
    "updated_on": "2014-11-15T10:37:17Z",
    "closed_on": "2014-11-09T17:55:48Z"
}