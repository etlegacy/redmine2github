{
    "children": [
        {
            "id": 1164,
            "tracker": {
                "id": 3,
                "name": "Task"
            },
            "subject": "Create the initial whitelist"
        },
        {
            "id": 1165,
            "tracker": {
                "id": 3,
                "name": "Task"
            },
            "subject": " Extend the vfs for separating downloads"
        },
        {
            "id": 1166,
            "tracker": {
                "id": 3,
                "name": "Task"
            },
            "subject": "Implement whitelist download and dialogs"
        }
    ],
    "attachments": null,
    "relations": [
        {
            "id": 381,
            "issue_id": 1161,
            "issue_to_id": 888,
            "relation_type": "relates",
            "delay": null
        }
    ],
    "changesets": [
        {
            "revision": "11c63f631258e6f03a5fabda2c7cf0faf86ca5f5",
            "user": {
                "id": 505,
                "name": "ryven"
            },
            "comments": "client: added pak isolation support\n\nrefs #1161 #1165",
            "committed_on": "2019-01-19T17:13:20Z"
        },
        {
            "revision": "f571bb142b9ca646cfffc74e43964fe65fb273cb",
            "user": {
                "id": 140,
                "name": "Spyhawk"
            },
            "comments": "general: relaxed files download check, refs #1161",
            "committed_on": "2019-08-27T11:38:12Z"
        },
        {
            "revision": "d7e43f20b9434e999578e953523188f42c0f8766",
            "user": {
                "id": 140,
                "name": "Spyhawk"
            },
            "comments": "client: removed deprecated /clean command, refs #1161\n\nThis is phased out in favour of pak isolation feature.",
            "committed_on": "2019-08-27T13:37:02Z"
        },
        {
            "revision": "86e57164cb84115c442feedb2e3708ef8c91bc54",
            "user": {
                "id": 140,
                "name": "Spyhawk"
            },
            "comments": "ui: removed deprecated clean option menu, refs #1161",
            "committed_on": "2019-08-27T13:37:28Z"
        }
    ],
    "journals": [
        {
            "id": 7551,
            "user": {
                "id": 505,
                "name": "ryven"
            },
            "notes": "",
            "created_on": "2019-01-15T15:43:07Z",
            "details": [
                {
                    "property": "attr",
                    "name": "description",
                    "old_value": "h1. The idea:  \r\n\r\nThis describes a proposal to improve current downloading system and provide a way to isolate certain custom paks coming from the servers  to address security and convenience issues.\r\n\r\n* Adds a way to isolate server specific content into subfolders per server basis (*server namespace*), making the content only be loaded once connected to the corresponding server.\r\n* Adds a way to whitelist the *sharable content* using external list of pak name and their hashes. This will effectively help to whitelist all map content and what not, making the content to be downloaded directly into the mod directory.\r\n\r\nThe file structure would look like this:\r\n\r\n<pre>\r\n<code>etmain/\r\n    .server_89422727960 (isolated content under the server namespace)\r\n        ~~~~~~~~~~~etmain_menu.pk3\r\n    .server_10923023911527960\r\n        zzz_pak_161208.pk3\r\n    1944_beach.pk3 (sharable content)\r\n    adlernest.pk3\r\njaymod/\r\n    .server_89422727960\r\n        ~~~~fav6.pk3\r\n        zz_jaymod-0.6d2.pk3\r\n    jaymod-2.2.0.pk3\r\n</code>\r\n</pre>\r\n\r\nAs said above, each server specific content would be downloaded in the *server namespace* directory, and be effectively isolated from other servers' content; and be loaded only once connected to the server, making all paks to work again as expected in-game, effectively avoiding any naming collisions. This also makes no custom paks to be loaded upon the game start, making all menus, sounds, shaders etc untouched, providing pure mod experience.\r\n\r\nh2. Benefits:\r\n\r\n* No malicious paks will affect the startup ETLegacy experience. (No nasty hacks to make you connecting to undesired servers)\r\n* No more server dictated custom menus. (You are still allowed to install any custom menus on your own)\r\n* Easy to perform cleanups, effectively excluding any sharable paks. (So no maps or other important paks will be removed, if cleanup command is performed)\r\n* Servers will still be able to push their custom paks following any naming conventions to vanilla clients. (No any changes for older clients)\r\n* Basically, server admins won't need to be forced to do any changes to their paks what so ever. (No work should be done by server holders)\r\n* Only whitelisted (secured) paks will be loaded as shared, everything else gets isolated. (Isolates all the potentially malicious content. You will able to disable the whitelisting for specific pak types.)\r\n* No more zzz-fighting for ETLegacy clients. (This stays untouced for older clients)\r\n\r\nThe listed benefits will sure make ETLegacy client more secure and convenient to use in eyes of players.\r\n\r\nh2. Downsides: \r\n\r\n* Non whitelisted (or non sharable) content might be downloaded more than once, if it is presented on multiple servers. (This is usually hardly an issue, as these paks are quite small)\r\n* Sharable pak (eg. maps) should be whitelisted before they can be downloaded directly into mod root directory. (configurable)\r\n\r\nh1. Details\r\n\r\n* *Server namespace* the directory name inside each mod folder, that will contain *.server_* prefix followed by the server ip: *.server_12700127960*.\r\n* *Sharable content* the content that does not get isolated by the server namespace on each download, but rather stored directly in the mod directory, and is accessible on any server connect session.\r\n* *Secure content* essentially the whitelisted sharable content.\r\n* *Isolated content* any content that doesn't suit under the sharable or secure content rules.\r\n\r\nh2. What suits the sharable content?\r\n\r\n* Depending on configuration, any *dynamic libraries* containing paks are eligible to be sharable contents, and hence be saved in mod directory.\r\n* Depending on configuration, any *BSP* containing paks are eligible to be sharable contents.\r\n* Any whitelisted paks, are considered to be sharable contents.\r\n\r\nh2. What is white list?\r\n\r\nEssentially this is a list of paks, that are considered to be safe to download in mod directory. Whitelist is distributed across the clients in form of database containing pair of pak name and sha1 hash. If downloaded pak is not contained in white list, the pak is going to be moved in *server namespace*. The white list will be curated by the community, *predominantly* mod and map files will be included in the list.\r\n\r\nh2. Configurations\r\n\r\nYou would be able configure the specifics of the behavior using next cvars for certain pak types:\r\n* *dl_whitelistDll*:\r\n** *0* (default) disables whitelisting for downloaded paks that contain dynamic libraries (dll), saves the pak directly into the mod directory.\r\n** *1* runs the downloaded dll pak against the white list, if pak is in white list, saves it in mod directory, otherwise isolates it in server namespace.\r\n* *dl_whitelistMap*:\r\n** *0* disables whitelisting for downloaded paks that contain BSP, saves the pak directly into the mod directory.\r\n** *1* (default) runs the downloaded dll pak against the white list, if pak is in white list saves it in mod directory, otherwise isolates it in server namespace.\r\n\r\nEvery other file not contained in the white list gets isolated in the server namespace.\r\n\r\n\r\n",
                    "new_value": "h1. The idea:  \r\n\r\nThis describes a proposal to improve current downloading system and provide a way to isolate certain custom paks coming from the servers  to address security and convenience issues.\r\n\r\n* Adds a way to isolate server specific content into subfolders per server basis (*server namespace*), making the content only be loaded once connected to the corresponding server.\r\n* Adds a way to whitelist the *sharable content* using external list of pak name and their hashes. This will effectively help to whitelist all map content and what not, making the content to be downloaded directly into the mod directory.\r\n\r\nThe file structure would look like this:\r\n\r\n<pre>\r\n<code>etmain/\r\n    .server_89422727960 (isolated content under the server namespace)\r\n        ~~~~~~~~~~~etmain_menu.pk3\r\n    .server_10923023911527960\r\n        zzz_pak_161208.pk3\r\n    1944_beach.pk3 (sharable content)\r\n    adlernest.pk3\r\njaymod/\r\n    .server_89422727960\r\n        ~~~~fav6.pk3\r\n        zz_jaymod-0.6d2.pk3\r\n    jaymod-2.2.0.pk3\r\n</code>\r\n</pre>\r\n\r\nAs said above, each server specific content would be downloaded in the *server namespace* directory, and be effectively isolated from other servers' content; and be loaded only once connected to the server, making all paks to work again as expected in-game, effectively avoiding any naming collisions. This also makes no custom paks to be loaded upon the game start, making all menus, sounds, shaders etc untouched, providing pure mod experience.\r\n\r\nh2. Benefits:\r\n\r\n* No malicious paks will affect the startup ETLegacy experience. (No nasty hacks to make you connecting to undesired servers)\r\n* No more server dictated custom menus. (You are still allowed to install any custom menus on your own)\r\n* Easy to perform cleanups, effectively excluding any sharable paks. (So no maps or other important paks will be removed, if cleanup command is performed)\r\n* Servers will still be able to push their custom paks following any naming conventions to vanilla clients. (No any changes for older clients)\r\n* Basically, server admins won't need to be forced to do any changes to their paks what so ever. (No work should be done by server holders)\r\n* Only whitelisted (secured) paks will be loaded as shared, everything else gets isolated. (Isolates all the potentially malicious content. You will able to disable the whitelisting for specific pak types.)\r\n* No more zzz-fighting for ETLegacy clients. (This stays untouced for older clients)\r\n\r\nThe listed benefits will sure make ETLegacy client more secure and convenient to use in eyes of players.\r\n\r\nh2. Downsides: \r\n\r\n* Non whitelisted (or non sharable) content might be downloaded more than once, if it is presented on multiple servers. (This is usually hardly an issue, as these paks are quite small)\r\n* Sharable pak (eg. maps) should be whitelisted before they can be downloaded directly into mod root directory. (configurable)\r\n\r\nh1. Details\r\n\r\n* *Server namespace* the directory name inside each mod folder, that will contain *.server_* prefix followed by the server ip: *.server_12700127960*.\r\n* *Sharable content* the content that does not get isolated by the server namespace on each download, but rather stored directly in the mod directory, and is accessible on any server connect session.\r\n* *Secure content* essentially the whitelisted sharable content.\r\n* *Isolated content* any content that doesn't suit under the sharable or secure content rules.\r\n\r\nh2. What suits the sharable content?\r\n\r\n* Depending on configuration, any *dynamic libraries* containing paks are eligible to be sharable contents, and hence be saved in mod directory.\r\n* Depending on configuration, any *BSP* containing paks are eligible to be sharable contents.\r\n* Any whitelisted paks, are considered to be sharable contents.\r\n\r\nh2. What is white list?\r\n\r\nEssentially this is a list of paks, that are considered to be safe to download in mod directory. Whitelist is distributed across the clients in form of database containing pair of pak name and sha1 hash. If downloaded pak is not contained in white list, the pak is going to be moved in *server namespace*. The white list will be curated by the community, *predominantly* mod and map files will be included in the list.\r\n\r\nh2. Configurations\r\n\r\nYou would be able configure the specifics of the behavior using next cvars for certain pak types:\r\n* *dl_whitelistModPaks*:\r\n** *0* (default) disables whitelisting for downloaded paks that contain dynamic libraries (dll), saves the pak directly into the mod directory.\r\n** *1* runs the downloaded dll pak against the white list, if pak is in white list, saves it in mod directory, otherwise isolates it in server namespace.\r\n* *dl_whitelistMapPaks*:\r\n** *0* disables whitelisting for downloaded paks that contain BSP, saves the pak directly into the mod directory.\r\n** *1* (default) runs the downloaded dll pak against the white list, if pak is in white list saves it in mod directory, otherwise isolates it in server namespace.\r\n\r\nEvery other file not contained in the white list gets isolated in the server namespace.\r\n\r\n\r\n"
                }
            ]
        },
        {
            "id": 7552,
            "user": {
                "id": 505,
                "name": "ryven"
            },
            "notes": "",
            "created_on": "2019-01-15T15:44:14Z",
            "details": [
                {
                    "property": "attr",
                    "name": "description",
                    "old_value": "h1. The idea:  \r\n\r\nThis describes a proposal to improve current downloading system and provide a way to isolate certain custom paks coming from the servers  to address security and convenience issues.\r\n\r\n* Adds a way to isolate server specific content into subfolders per server basis (*server namespace*), making the content only be loaded once connected to the corresponding server.\r\n* Adds a way to whitelist the *sharable content* using external list of pak name and their hashes. This will effectively help to whitelist all map content and what not, making the content to be downloaded directly into the mod directory.\r\n\r\nThe file structure would look like this:\r\n\r\n<pre>\r\n<code>etmain/\r\n    .server_89422727960 (isolated content under the server namespace)\r\n        ~~~~~~~~~~~etmain_menu.pk3\r\n    .server_10923023911527960\r\n        zzz_pak_161208.pk3\r\n    1944_beach.pk3 (sharable content)\r\n    adlernest.pk3\r\njaymod/\r\n    .server_89422727960\r\n        ~~~~fav6.pk3\r\n        zz_jaymod-0.6d2.pk3\r\n    jaymod-2.2.0.pk3\r\n</code>\r\n</pre>\r\n\r\nAs said above, each server specific content would be downloaded in the *server namespace* directory, and be effectively isolated from other servers' content; and be loaded only once connected to the server, making all paks to work again as expected in-game, effectively avoiding any naming collisions. This also makes no custom paks to be loaded upon the game start, making all menus, sounds, shaders etc untouched, providing pure mod experience.\r\n\r\nh2. Benefits:\r\n\r\n* No malicious paks will affect the startup ETLegacy experience. (No nasty hacks to make you connecting to undesired servers)\r\n* No more server dictated custom menus. (You are still allowed to install any custom menus on your own)\r\n* Easy to perform cleanups, effectively excluding any sharable paks. (So no maps or other important paks will be removed, if cleanup command is performed)\r\n* Servers will still be able to push their custom paks following any naming conventions to vanilla clients. (No any changes for older clients)\r\n* Basically, server admins won't need to be forced to do any changes to their paks what so ever. (No work should be done by server holders)\r\n* Only whitelisted (secured) paks will be loaded as shared, everything else gets isolated. (Isolates all the potentially malicious content. You will able to disable the whitelisting for specific pak types.)\r\n* No more zzz-fighting for ETLegacy clients. (This stays untouced for older clients)\r\n\r\nThe listed benefits will sure make ETLegacy client more secure and convenient to use in eyes of players.\r\n\r\nh2. Downsides: \r\n\r\n* Non whitelisted (or non sharable) content might be downloaded more than once, if it is presented on multiple servers. (This is usually hardly an issue, as these paks are quite small)\r\n* Sharable pak (eg. maps) should be whitelisted before they can be downloaded directly into mod root directory. (configurable)\r\n\r\nh1. Details\r\n\r\n* *Server namespace* the directory name inside each mod folder, that will contain *.server_* prefix followed by the server ip: *.server_12700127960*.\r\n* *Sharable content* the content that does not get isolated by the server namespace on each download, but rather stored directly in the mod directory, and is accessible on any server connect session.\r\n* *Secure content* essentially the whitelisted sharable content.\r\n* *Isolated content* any content that doesn't suit under the sharable or secure content rules.\r\n\r\nh2. What suits the sharable content?\r\n\r\n* Depending on configuration, any *dynamic libraries* containing paks are eligible to be sharable contents, and hence be saved in mod directory.\r\n* Depending on configuration, any *BSP* containing paks are eligible to be sharable contents.\r\n* Any whitelisted paks, are considered to be sharable contents.\r\n\r\nh2. What is white list?\r\n\r\nEssentially this is a list of paks, that are considered to be safe to download in mod directory. Whitelist is distributed across the clients in form of database containing pair of pak name and sha1 hash. If downloaded pak is not contained in white list, the pak is going to be moved in *server namespace*. The white list will be curated by the community, *predominantly* mod and map files will be included in the list.\r\n\r\nh2. Configurations\r\n\r\nYou would be able configure the specifics of the behavior using next cvars for certain pak types:\r\n* *dl_whitelistModPaks*:\r\n** *0* (default) disables whitelisting for downloaded paks that contain dynamic libraries (dll), saves the pak directly into the mod directory.\r\n** *1* runs the downloaded dll pak against the white list, if pak is in white list, saves it in mod directory, otherwise isolates it in server namespace.\r\n* *dl_whitelistMapPaks*:\r\n** *0* disables whitelisting for downloaded paks that contain BSP, saves the pak directly into the mod directory.\r\n** *1* (default) runs the downloaded dll pak against the white list, if pak is in white list saves it in mod directory, otherwise isolates it in server namespace.\r\n\r\nEvery other file not contained in the white list gets isolated in the server namespace.\r\n\r\n\r\n",
                    "new_value": "h1. The idea:  \r\n\r\nThis describes a proposal to improve current downloading system and provide a way to isolate certain custom paks coming from the servers  to address security and convenience issues.\r\n\r\n* Adds a way to isolate server specific content into subfolders per server basis (*server namespace*), making the content only be loaded once connected to the corresponding server.\r\n* Adds a way to whitelist the *sharable content* using external list of pak name and their hashes. This will effectively help to whitelist all map content and what not, making the content to be downloaded directly into the mod directory.\r\n\r\nThe file structure would look like this:\r\n\r\n<pre>\r\n<code>etmain/\r\n    .server_89422727960 (isolated content under the server namespace)\r\n        ~~~~~~~~~~~etmain_menu.pk3\r\n    .server_10923023911527960\r\n        zzz_pak_161208.pk3\r\n    1944_beach.pk3 (sharable content)\r\n    adlernest.pk3\r\njaymod/\r\n    .server_89422727960\r\n        ~~~~fav6.pk3\r\n        zz_jaymod-0.6d2.pk3\r\n    jaymod-2.2.0.pk3\r\n</code>\r\n</pre>\r\n\r\nAs said above, each server specific content would be downloaded in the *server namespace* directory, and be effectively isolated from other servers' content; and be loaded only once connected to the server, making all paks to work again as expected in-game, effectively avoiding any naming collisions. This also makes no custom paks to be loaded upon the game start, making all menus, sounds, shaders etc untouched, providing pure mod experience.\r\n\r\nh2. Benefits:\r\n\r\n* No malicious paks will affect the startup ETLegacy experience. (No nasty hacks to make you connecting to undesired servers)\r\n* No more server dictated custom menus. (You are still allowed to install any custom menus on your own)\r\n* Easy to perform cleanups, effectively excluding any sharable paks. (So no maps or other important paks will be removed, if cleanup command is performed)\r\n* Servers will still be able to push their custom paks following any naming conventions to vanilla clients. (No any changes for older clients)\r\n* Basically, server admins won't need to be forced to do any changes to their paks what so ever. (No work should be done by server holders)\r\n* Only whitelisted (secured) paks will be loaded as shared, everything else gets isolated. (Isolates all the potentially malicious content. You will able to disable the whitelisting for specific pak types.)\r\n* No more zzz-fighting for ETLegacy clients. (This stays untouced for older clients)\r\n\r\nThe listed benefits will sure make ETLegacy client more secure and convenient to use in eyes of players.\r\n\r\nh2. Downsides: \r\n\r\n* Non whitelisted (or non sharable) content might be downloaded more than once, if it is presented on multiple servers. (This is usually hardly an issue, as these paks are quite small)\r\n* Sharable pak (eg. maps) should be whitelisted before they can be downloaded directly into mod root directory. (configurable)\r\n\r\nh1. Details\r\n\r\n* *Server namespace* the directory name inside each mod folder, that will contain *.server_* prefix followed by the server ip: *.server_12700127960*.\r\n* *Sharable content* the content that does not get isolated by the server namespace on each download, but rather stored directly in the mod directory, and is accessible on any server connect session.\r\n* *Secure content* essentially the whitelisted sharable content.\r\n* *Isolated content* any content that doesn't suit under the sharable or secure content rules.\r\n\r\nh2. What suits the sharable content?\r\n\r\n* Depending on configuration, any *dynamic libraries* containing paks are eligible to be sharable contents, and hence be saved in mod directory.\r\n* Depending on configuration, any *BSP* containing paks are eligible to be sharable contents.\r\n* Any whitelisted paks, are considered to be sharable contents.\r\n\r\nh2. What is white list?\r\n\r\nEssentially this is a list of paks, that are considered to be safe to download in mod directory. Whitelist is distributed across the clients in form of database containing pair of pak name and sha1 hash. If downloaded pak is not contained in white list, the pak is going to be moved in *server namespace*. The white list will be curated by the community, *predominantly* mod and map files will be included in the list.\r\n\r\nh2. Configurations\r\n\r\nYou would be able configure the specifics of the behavior using next cvars for certain pak types:\r\n* *dl_whitelistModPaks*:\r\n** *0* (default) disables whitelisting for downloaded paks that contain dynamic libraries (dll), saves the pak directly into the mod directory.\r\n** *1* runs the downloaded dll pak against the white list, if pak is in white list, saves it in mod directory, otherwise isolates it in server namespace.\r\n* *dl_whitelistMapPaks*:\r\n** *0* disables whitelisting for downloaded paks that contain BSP, saves the pak directly into the mod directory.\r\n** *1* (default) runs the downloaded map pak against the white list, if pak is in white list saves it in mod directory, otherwise isolates it in server namespace.\r\n\r\nEvery other file not contained in the white list gets isolated in the server namespace.\r\n\r\n\r\n"
                }
            ]
        },
        {
            "id": 7553,
            "user": {
                "id": 3,
                "name": "IR4T4"
            },
            "notes": "",
            "created_on": "2019-01-15T16:02:24Z",
            "details": [
                {
                    "property": "attr",
                    "name": "priority_id",
                    "old_value": "4",
                    "new_value": "7"
                }
            ]
        },
        {
            "id": 7557,
            "user": {
                "id": 392,
                "name": "Timothy"
            },
            "notes": "",
            "created_on": "2019-01-15T17:15:47Z",
            "details": [
                {
                    "property": "attr",
                    "name": "subject",
                    "old_value": "Propsal: implement server pak isolation",
                    "new_value": "Proposal: implement server pak isolation"
                }
            ]
        },
        {
            "id": 7580,
            "user": {
                "id": 140,
                "name": "Spyhawk"
            },
            "notes": "",
            "created_on": "2019-01-17T19:39:02Z",
            "details": [
                {
                    "property": "relation",
                    "name": "relates",
                    "new_value": "888"
                }
            ]
        }
    ],
    "watchers": [
        {
            "id": 140,
            "name": "Spyhawk"
        }
    ],
    "time_entries": null,
    "id": 1161,
    "project": {
        "id": 1,
        "name": "ET: Legacy Development"
    },
    "tracker": {
        "id": 2,
        "name": "Feature"
    },
    "status": {
        "id": 1,
        "name": "New"
    },
    "priority": {
        "id": 4,
        "name": "Normal"
    },
    "author": {
        "id": 505,
        "name": "ryven"
    },
    "category": {
        "id": 1,
        "name": "Client"
    },
    "fixed_version": {
        "id": 22,
        "name": "2.77"
    },
    "subject": "Proposal: implement server pak isolation",
    "description": "h1. The idea:  \r\n\r\nThis describes a proposal to improve current downloading system and provide a way to isolate certain custom paks coming from the servers  to address security and convenience issues.\r\n\r\n* Adds a way to isolate server specific content into subfolders per server basis (*server namespace*), making the content only be loaded once connected to the corresponding server.\r\n* Adds a way to whitelist the *sharable content* using external list of pak name and their hashes. This will effectively help to whitelist all map content and what not, making the content to be downloaded directly into the mod directory.\r\n\r\nThe file structure would look like this:\r\n\r\n<pre>\r\n<code>etmain/\r\n    .server_89422727960 (isolated content under the server namespace)\r\n        ~~~~~~~~~~~etmain_menu.pk3\r\n    .server_10923023911527960\r\n        zzz_pak_161208.pk3\r\n    1944_beach.pk3 (sharable content)\r\n    adlernest.pk3\r\njaymod/\r\n    .server_89422727960\r\n        ~~~~fav6.pk3\r\n        zz_jaymod-0.6d2.pk3\r\n    jaymod-2.2.0.pk3\r\n</code>\r\n</pre>\r\n\r\nAs said above, each server specific content would be downloaded in the *server namespace* directory, and be effectively isolated from other servers' content; and be loaded only once connected to the server, making all paks to work again as expected in-game, effectively avoiding any naming collisions. This also makes no custom paks to be loaded upon the game start, making all menus, sounds, shaders etc untouched, providing pure mod experience.\r\n\r\nh2. Benefits:\r\n\r\n* No malicious paks will affect the startup ETLegacy experience. (No nasty hacks to make you connecting to undesired servers)\r\n* No more server dictated custom menus. (You are still allowed to install any custom menus on your own)\r\n* Easy to perform cleanups, effectively excluding any sharable paks. (So no maps or other important paks will be removed, if cleanup command is performed)\r\n* Servers will still be able to push their custom paks following any naming conventions to vanilla clients. (No any changes for older clients)\r\n* Basically, server admins won't need to be forced to do any changes to their paks what so ever. (No work should be done by server holders)\r\n* Only whitelisted (secured) paks will be loaded as shared, everything else gets isolated. (Isolates all the potentially malicious content. You will able to disable the whitelisting for specific pak types.)\r\n* No more zzz-fighting for ETLegacy clients. (This stays untouced for older clients)\r\n\r\nThe listed benefits will sure make ETLegacy client more secure and convenient to use in eyes of players.\r\n\r\nh2. Downsides: \r\n\r\n* Non whitelisted (or non sharable) content might be downloaded more than once, if it is presented on multiple servers. (This is usually hardly an issue, as these paks are quite small)\r\n* Sharable pak (eg. maps) should be whitelisted before they can be downloaded directly into mod root directory. (configurable)\r\n\r\nh1. Details\r\n\r\n* *Server namespace* the directory name inside each mod folder, that will contain *.server_* prefix followed by the server ip: *.server_12700127960*.\r\n* *Sharable content* the content that does not get isolated by the server namespace on each download, but rather stored directly in the mod directory, and is accessible on any server connect session.\r\n* *Secure content* essentially the whitelisted sharable content.\r\n* *Isolated content* any content that doesn't suit under the sharable or secure content rules.\r\n\r\nh2. What suits the sharable content?\r\n\r\n* Depending on configuration, any *dynamic libraries* containing paks are eligible to be sharable contents, and hence be saved in mod directory.\r\n* Depending on configuration, any *BSP* containing paks are eligible to be sharable contents.\r\n* Any whitelisted paks, are considered to be sharable contents.\r\n\r\nh2. What is white list?\r\n\r\nEssentially this is a list of paks, that are considered to be safe to download in mod directory. Whitelist is distributed across the clients in form of database containing pair of pak name and sha1 hash. If downloaded pak is not contained in white list, the pak is going to be moved in *server namespace*. The white list will be curated by the community, *predominantly* mod and map files will be included in the list.\r\n\r\nh2. Configurations\r\n\r\nYou would be able configure the specifics of the behavior using next cvars for certain pak types:\r\n* *dl_whitelistModPaks*:\r\n** *0* (default) disables whitelisting for downloaded paks that contain dynamic libraries (dll), saves the pak directly into the mod directory.\r\n** *1* runs the downloaded dll pak against the white list, if pak is in white list, saves it in mod directory, otherwise isolates it in server namespace.\r\n* *dl_whitelistMapPaks*:\r\n** *0* disables whitelisting for downloaded paks that contain BSP, saves the pak directly into the mod directory.\r\n** *1* (default) runs the downloaded map pak against the white list, if pak is in white list saves it in mod directory, otherwise isolates it in server namespace.\r\n\r\nEvery other file not contained in the white list gets isolated in the server namespace.\r\n\r\n\r\n",
    "start_date": "2019-01-15",
    "done_ratio": 60,
    "custom_fields": [
        {
            "id": 1,
            "name": "OS",
            "value": ""
        },
        {
            "id": 2,
            "name": "Arch",
            "value": ""
        }
    ],
    "created_on": "2019-01-15T15:25:42Z",
    "updated_on": "2019-01-27T08:06:33Z"
}